{"version":3,"sources":["compunent/food/Food.js","compunent/snake body/SnakeBody.js","compunent/dead/DeadScreen.js","compunent/box/Box.js","App.js","index.js"],"names":["Food","className","SnakeBody","grid","setDead","setGrid","useState","body","head","snake","setSnake","food","setFood","length","score","setScore","direction","useRef","isFoodEaten","coor","randomFood","x","Math","floor","random","y","isSnakeBody","console","log","i","checkNewCoor","newCoor","splice","incrementVelocity","d","a","current","useEffect","setTimeout","onKeyDown","e","event","keyCode","setDirections","tabIndex","map","row","isSnakeHead","DeadScreen","onClick","Box","undefined","dead","tempGrid","tempCol","j","push","buildGrid","newDirection","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11a8cb11.chunk.js","sourcesContent":["import React from 'react'\r\nimport './food.css'\r\nexport default function Food() {\r\n    return (\r\n        <div className='apple'></div>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useReducer, useRef } from 'react'\r\nimport Food from '../food/Food'\r\nimport './snakeBody.css'\r\nexport default function SnakeBody({grid,setGrid,setDead}) {\r\n    const [snake,setSnake] = useState({\r\n        body:[[0,0]],\r\n        head: [0,1]\r\n    })\r\n    const [food,setFood] = useState([7,7])\r\n    const [score,setScore] = useState(snake.body.length)\r\n    \r\n    const direction = useRef('right');\r\n\r\n\r\n    const randomFood=()=>{\r\n        const max = 9\r\n\r\n        let x = Math.floor((Math.random()*max))\r\n        let y = Math.floor((Math.random()*max))\r\n\r\n        if(isSnakeBody([x,y])){\r\n            console.log('in the body')\r\n            return randomFood()\r\n        }else{\r\n            return [x,y]\r\n        }\r\n\r\n    }\r\n\r\n    const isFoodEaten = (coor) => {\r\n        if(coor[0] === food[0] && coor[1] === food[1]){\r\n            setFood(randomFood())\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    const isSnakeHead=(coor)=>{\r\n        if(snake.head[0]=== coor[0] && snake.head[1]=== coor[1])\r\n            return true\r\n        return false\r\n    }\r\n\r\n    const isSnakeBody = (coor) => {\r\n        for(let i=0; i< snake.body.length; i++){\r\n            if(snake.body[i][0]=== coor[0] && snake.body[i][1]=== coor[1]){\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    const setDirections = (event) => {\r\n\r\n        // eslint-disable-next-line default-case\r\n        switch(event.keyCode){\r\n            case 39:\r\n                direction.current = 'right'\r\n                break\r\n            case 37:\r\n                direction.current = 'left'\r\n                break\r\n            case 38:\r\n                direction.current = 'up'\r\n                break     \r\n            case 40:\r\n                direction.current = 'down'\r\n                break     \r\n        }\r\n    }\r\n\r\n    const checkNewCoor = (newCoor) => {\r\n        if(isFoodEaten(newCoor)){\r\n            setScore(score+1)\r\n\r\n            setSnake({\r\n                body:[...snake.body,snake.head],\r\n                head:newCoor\r\n            })\r\n        }else{\r\n            setSnake({\r\n                body:[...snake.body.splice(1),snake.head],\r\n                head:newCoor\r\n            })\r\n        }\r\n        \r\n        if(isSnakeBody(newCoor)){\r\n            console.log('newCoor:',newCoor,'snakeBody:',snake.body)\r\n            return setDead(true)\r\n        }\r\n        if(newCoor[0] > 9 || newCoor[0]<0 || newCoor[1] > 9 || newCoor[1]<0)\r\n            return setDead(true)\r\n    }\r\n\r\n    const incrementVelocity = async (d) =>{\r\n        let newCoor;\r\n\r\n        // eslint-disable-next-line default-case\r\n        switch(d){\r\n            case 'right':\r\n                newCoor = [snake.head[0],snake.head[1]+1]\r\n                break\r\n            case 'left':\r\n                newCoor = [snake.head[0],snake.head[1]-1]\r\n                break;\r\n            case 'up':\r\n                newCoor = [snake.head[0]-1,snake.head[1]]\r\n                break;     \r\n            case 'down':\r\n                newCoor = [snake.head[0]+1,snake.head[1]]\r\n                break;       \r\n\r\n        }\r\n        checkNewCoor(newCoor)\r\n        direction.current = d\r\n\r\n    }\r\n\r\n    \r\n    useEffect(() => {\r\n        setTimeout(()=>{\r\n            incrementVelocity(direction.current)\r\n        },2000-(score*10))\r\n        \r\n    }, [snake])\r\n    \r\n    return (\r\n        <div>\r\n            <div>\r\n              score:{score}  \r\n            </div>\r\n            \r\n            <div onKeyDown={(e)=>setDirections(e)} tabIndex=\"0\" className='grid'>\r\n                {\r\n                    grid ?\r\n                        grid.map(row=>(\r\n                            row.map(coor => \r\n                                (\r\n                                    !isSnakeBody(coor) && !isSnakeHead(coor) ?\r\n                                        food[0] === coor[0] && food[1] === coor[1] ? \r\n                                            <Food />\r\n                                            :\r\n                                            <div className='empty'></div>\r\n                                        :\r\n                                    <div className='body'></div>\r\n                                ))\r\n                        ))\r\n                    :\r\n                    'Error: No Grid'\r\n                }\r\n            </div>   \r\n      \r\n        </div>\r\n\r\n    )\r\n\r\n    \r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport './DeadScreen.css'\r\n\r\nexport default function DeadScreen({setDead}) {\r\n    return (\r\n        <div className='deadScreen-container'>\r\n            <p>Game Over</p>\r\n            <div>\r\n                <button onClick={()=>setDead(false)}>\r\n                    Play\r\n                </button>   \r\n            </div>\r\n            <p>Double tap on the Play button</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport './box.css'\r\nimport SnakeBody from '../snake body/SnakeBody'\r\nimport DeadScreen from '../dead/DeadScreen'\r\nconst boxSymbol = 'â– '\r\n\r\nexport default function Box({direction}) {\r\n    const [grid,setGrid] = useState(undefined)\r\n    const [dead,setDead] = useState(false)\r\n\r\n    \r\n    const buildGrid = () => {\r\n        let tempGrid = []\r\n        for(let i=0; i<10; i++){\r\n            let tempCol  = []\r\n            for(let j=0; j<10; j++){\r\n                tempCol.push([i,j])\r\n            }\r\n            tempGrid.push(tempCol)\r\n        }\r\n        setGrid(tempGrid)\r\n    }\r\n\r\n    useEffect(() => {\r\n        buildGrid()\r\n        return () => {\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className='box-container'>\r\n            <div>\r\n                {\r\n                    dead?\r\n                        <DeadScreen setDead={setDead}/>\r\n                    :\r\n                        <SnakeBody grid={grid ? grid : []} setGrid={setGrid} setDead={setDead} newDirection={direction}/>\r\n                }\r\n            </div>  \r\n            {/* <div>\r\n                <button onClick={()=>setDead(false)}>\r\n                    Play\r\n                </button>   \r\n            </div>           */}\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Box from './compunent/box/Box'\nfunction App() {\n  return (\n    <div className='box'>\n      <Box/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}